package com.github.jomof.kane.rigueur

import java.math.BigDecimal
import java.math.RoundingMode
import kotlin.math.abs
import kotlin.math.exp
import kotlin.math.pow


private val record = """
    0.002861781660062725
    -5.652798582565627 = [0|1|1|1|1|0|1|0]ᵀ
    -5.5983630472312385 = [0|1|1|1|0|0|1|0]ᵀ
    -5.021352477041921 = [0|1|1|1|1|0|0|0]ᵀ
    -4.966916941707534 = [0|1|1|1|0|0|0|0]ᵀ
    -4.902432008639871 = [1|1|1|1|1|0|1|0]ᵀ
    -4.847996473305483 = [1|1|1|1|0|0|1|0]ᵀ
    -4.270985903116166 = [1|1|1|1|1|0|0|0]ᵀ
    -4.216550367781778 = [1|1|1|1|0|0|0|0]ᵀ
    -4.178176071990595 = [0|1|1|0|1|0|1|0]ᵀ
    -4.123740536656207 = [0|1|1|0|0|0|1|0]ᵀ
    -3.9788631059074633 = [0|1|0|1|1|0|1|0]ᵀ
    -3.9244275705730756 = [0|1|0|1|0|0|1|0]ᵀ
    -3.9155532820134162 = [0|1|1|1|1|0|1|1]ᵀ
    -3.861117746679028 = [0|1|1|1|0|0|1|1]ᵀ
    -3.834439628091288 = [0|0|1|1|1|0|1|0]ᵀ
    -3.7800040927569003 = [0|0|1|1|0|0|1|0]ᵀ
    -3.546729966466889 = [0|1|1|0|1|0|0|0]ᵀ
    -3.4922944311325015 = [0|1|1|0|0|0|0|0]ᵀ
    -3.4278094980648404 = [1|1|1|0|1|0|1|0]ᵀ
    -3.3733739627304526 = [1|1|1|0|0|0|1|0]ᵀ
    -3.347417000383758 = [0|1|0|1|1|0|0|0]ᵀ
    -3.2929814650493703 = [0|1|0|1|0|0|0|0]ᵀ
    -3.2841071764897114 = [0|1|1|1|1|0|0|1]ᵀ
    -3.229671641155323 = [0|1|1|1|0|0|0|1]ᵀ
    -3.2284965319817087 = [1|1|0|1|1|0|1|0]ᵀ
    -3.2029935225675827 = [0|0|1|1|1|0|0|0]ᵀ
    -3.17406099664732 = [1|1|0|1|0|0|1|0]ᵀ
    -3.1651867080876612 = [1|1|1|1|1|0|1|1]ᵀ
    -3.1485579872331955 = [0|0|1|1|0|0|0|0]ᵀ
    -3.110751172753273 = [1|1|1|1|0|0|1|1]ᵀ
    -3.084073054165534 = [1|0|1|1|1|0|1|0]ᵀ
    -3.0296375188311453 = [1|0|1|1|0|0|1|0]ᵀ
    -2.796363392541135 = [1|1|1|0|1|0|0|0]ᵀ
    -2.741927857206747 = [1|1|1|0|0|0|0|0]ᵀ
    -2.5970504264580034 = [1|1|0|1|1|0|0|0]ᵀ
    -2.5426148911236157 = [1|1|0|1|0|0|0|0]ᵀ
    -2.5337406025639555 = [1|1|1|1|1|0|0|1]ᵀ
    -2.5042405953324316 = [0|1|0|0|1|0|1|0]ᵀ
    -2.4905424298424377 = [0|1|1|1|1|1|1|0]ᵀ
    -2.4793050672295673 = [1|1|1|1|0|0|0|1]ᵀ
    -2.452626948641828 = [1|0|1|1|1|0|0|0]ᵀ
    -2.449805059998044 = [0|1|0|0|0|0|1|0]ᵀ
    -2.4409307714383837 = [0|1|1|0|1|0|1|1]ᵀ
    -2.4361068945080495 = [0|1|1|1|0|1|1|0]ᵀ
    -2.39819141330744 = [1|0|1|1|0|0|0|0]ᵀ
    -2.386495236103996 = [0|1|1|0|0|0|1|1]ᵀ
    -2.3598171175162572 = [0|0|1|0|1|0|1|0]ᵀ
    -2.305381582181869 = [0|0|1|0|0|0|1|0]ᵀ
    -2.2416178053552533 = [0|1|0|1|1|0|1|1]ᵀ
    -2.187182270020865 = [0|1|0|1|0|0|1|1]ᵀ
    -2.1605041514331256 = [0|0|0|1|1|0|1|0]ᵀ
    -2.106068616098737 = [0|0|0|1|0|0|1|0]ᵀ
    -2.097194327539077 = [0|0|1|1|1|0|1|1]ᵀ
    -2.04275879220469 = [0|0|1|1|0|0|1|1]ᵀ
    -1.872794489808726 = [0|1|0|0|1|0|0|0]ᵀ
    -1.859096324318732 = [0|1|1|1|1|1|0|0]ᵀ
    -1.8183589544743386 = [0|1|0|0|0|0|0|0]ᵀ
    -1.8094846659146788 = [0|1|1|0|1|0|0|1]ᵀ
    -1.8046607889843442 = [0|1|1|1|0|1|0|0]ᵀ
    -1.7550491305802909 = [0|1|1|0|0|0|0|1]ᵀ
    -1.7538740214066775 = [1|1|0|0|1|0|1|0]ᵀ
    -1.7401758559166824 = [1|1|1|1|1|1|1|0]ᵀ
    -1.7283710119925515 = [0|0|1|0|1|0|0|0]ᵀ
    -1.699438486072289 = [1|1|0|0|0|0|1|0]ᵀ
    -1.6905641975126295 = [1|1|1|0|1|0|1|1]ᵀ
    -1.6857403205822945 = [1|1|1|1|0|1|1|0]ᵀ
    -1.6739354766581633 = [0|0|1|0|0|0|0|0]ᵀ
    -1.6361286621782412 = [1|1|1|0|0|0|1|1]ᵀ
    -1.6101716998315474 = [0|1|0|1|1|0|0|1]ᵀ
    -1.6094505435905018 = [1|0|1|0|1|0|1|0]ᵀ
    -1.5557361644971595 = [0|1|0|1|0|0|0|1]ᵀ
    -1.5550150082561134 = [1|0|1|0|0|0|1|0]ᵀ
    -1.5290580459094198 = [0|0|0|1|1|0|0|0]ᵀ
    -1.4912512314294981 = [1|1|0|1|1|0|1|1]ᵀ
    -1.4746225105750317 = [0|0|0|1|0|0|0|0]ᵀ
    -1.4657482220153721 = [0|0|1|1|1|0|0|1]ᵀ
    -1.4368156960951095 = [1|1|0|1|0|0|1|1]ᵀ
    -1.4113126866809844 = [0|0|1|1|0|0|0|1]ᵀ
    -1.41013757750737 = [1|0|0|1|1|0|1|0]ᵀ
    -1.355702042172982 = [1|0|0|1|0|0|1|0]ᵀ
    -1.3468277536133226 = [1|0|1|1|1|0|1|1]ᵀ
    -1.2923922182789351 = [1|0|1|1|0|0|1|1]ᵀ
    -1.1224279158829717 = [1|1|0|0|1|0|0|0]ᵀ
    -1.108729750392977 = [1|1|1|1|1|1|0|0]ᵀ
    -1.0679923805485834 = [1|1|0|0|0|0|0|0]ᵀ
    -1.0591180919889243 = [1|1|1|0|1|0|0|1]ᵀ
    -1.0542942150585892 = [1|1|1|1|0|1|0|0]ᵀ
    -1.0159199192674053 = [0|1|1|0|1|1|1|0]ᵀ
    -1.0046825566545363 = [1|1|1|0|0|0|0|1]ᵀ
    -0.9780044380667962 = [1|0|1|0|1|0|0|0]ᵀ
    -0.9614843839330183 = [0|1|1|0|0|1|1|0]ᵀ
    -0.9235689027324081 = [1|0|1|0|0|0|0|0]ᵀ
    -0.8598051259057925 = [1|1|0|1|1|0|0|1]ᵀ
    -0.816606953184274 = [0|1|0|1|1|1|1|0]ᵀ
    -0.8053695905714042 = [1|1|0|1|0|0|0|1]ᵀ
    -0.7786914719836646 = [1|0|0|1|1|0|0|0]ᵀ
    -0.7669952947802208 = [0|1|0|0|1|0|1|1]ᵀ
    -0.7621714178498865 = [0|1|0|1|0|1|1|0]ᵀ
    -0.7532971292902265 = [0|1|1|1|1|1|1|1]ᵀ
    -0.7242559366492766 = [1|0|0|1|0|0|0|0]ᵀ
    -0.7153816480896177 = [1|0|1|1|1|0|0|1]ᵀ
    -0.7125597594458328 = [0|1|0|0|0|0|1|1]ᵀ
    -0.6988615939558387 = [0|1|1|1|0|1|1|1]ᵀ
    -0.6858816408580932 = [0|0|0|0|1|0|1|0]ᵀ
    -0.6721834753680987 = [0|0|1|1|1|1|1|0]ᵀ
    -0.6609461127552296 = [1|0|1|1|0|0|0|1]ᵀ
    -0.6314461055237055 = [0|0|0|0|0|0|1|0]ᵀ
    -0.622571816964046 = [0|0|1|0|1|0|1|1]ᵀ
    -0.617747940033711 = [0|0|1|1|0|1|1|0]ᵀ
    -0.5681362816296579 = [0|0|1|0|0|0|1|1]ᵀ
    -0.42325885088091436 = [0|0|0|1|1|0|1|1]ᵀ
    -0.3844738137437 = [0|1|1|0|1|1|0|0]ᵀ
    -0.36882331554652636 = [0|0|0|1|0|0|1|1]ᵀ
    -0.3300382784093126 = [0|1|1|0|0|1|0|0]ᵀ
    -0.265553345341651 = [1|1|1|0|1|1|1|0]ᵀ
    -0.21111781000726315 = [1|1|1|0|0|1|1|0]ᵀ
    -0.18516084766056862 = [0|1|0|1|1|1|0|0]ᵀ
    -0.1355491892565155 = [0|1|0|0|1|0|0|1]ᵀ
    -0.13072531232618112 = [0|1|0|1|0|1|0|0]ᵀ
    -0.12185102376652138 = [0|1|1|1|1|1|0|1]ᵀ
    -0.0811136539221275 = [0|1|0|0|0|0|0|1]ᵀ
    -0.0674154884321333 = [0|1|1|1|0|1|0|1]ᵀ
    -0.06624037925851944 = [1|1|0|1|1|1|1|0]ᵀ
    -0.0544355353343878 = [0|0|0|0|1|0|0|0]ᵀ
    -0.04073736984439332 = [0|0|1|1|1|1|0|0]ᵀ
    -0.016628720854466206 = [1|1|0|0|1|0|1|1]ᵀ
    -0.011804843924131052 = [1|1|0|1|0|1|1|0]ᵀ
    -0.002930555364471968 = [1|1|1|1|1|1|1|1]ᵀ
    0.0 = [0|0|0|0|0|0|0|0]ᵀ
    0.008874288559659535 = [0|0|1|0|1|0|0|1]ᵀ
    0.013698165489994474 = [0|0|1|1|0|1|0|0]ᵀ
    0.03780681447992219 = [1|1|0|0|0|0|1|1]ᵀ
    0.05150497996991629 = [1|1|1|1|0|1|1|1]ᵀ
    0.06330982389404734 = [0|0|1|0|0|0|0|1]ᵀ
    0.06448493306766208 = [1|0|0|0|1|0|1|0]ᵀ
    0.0781830985576562 = [1|0|1|1|1|1|1|0]ᵀ
    0.11892046840204974 = [1|0|0|0|0|0|1|0]ᵀ
    0.12779475696170933 = [1|0|1|0|1|0|1|1]ᵀ
    0.13261863389204356 = [1|0|1|1|0|1|1|0]ᵀ
    0.1822302922960973 = [1|0|1|0|0|0|1|1]ᵀ
    0.20818725464279125 = [0|0|0|1|1|0|0|1]ᵀ
    0.26262278997717914 = [0|0|0|1|0|0|0|1]ᵀ
    0.32710772304484087 = [1|0|0|1|1|0|1|1]ᵀ
    0.3658927601820543 = [1|1|1|0|1|1|0|0]ᵀ
    0.3815432583792293 = [1|0|0|1|0|0|1|1]ᵀ
    0.42032829551644246 = [1|1|1|0|0|1|0|0]ᵀ
    0.5652057262651863 = [1|1|0|1|1|1|0|0]ᵀ
    0.6148173846692393 = [1|1|0|0|1|0|0|1]ᵀ
    0.6196412615995742 = [1|1|0|1|0|1|0|0]ᵀ
    0.628515550159234 = [1|1|1|1|1|1|0|1]ᵀ
    0.6580155573907575 = [0|1|0|0|1|1|1|0]ᵀ
    0.6692529200036273 = [1|1|0|0|0|0|0|1]ᵀ
    0.6829510854936218 = [1|1|1|1|0|1|0|1]ᵀ
    0.6959310385913674 = [1|0|0|0|1|0|0|0]ᵀ
    0.7096292040813614 = [1|0|1|1|1|1|0|0]ᵀ
    0.7124510927251453 = [0|1|0|0|0|1|1|0]ᵀ
    0.7213253812848055 = [0|1|1|0|1|1|1|1]ᵀ
    0.750366573925755 = [1|0|0|0|0|0|0|0]ᵀ
    0.7592408624854146 = [1|0|1|0|1|0|0|1]ᵀ
    0.764064739415749 = [1|0|1|1|0|1|0|0]ᵀ
    0.7757609166191927 = [0|1|1|0|0|1|1|1]ᵀ
    0.8024390352069326 = [0|0|1|0|1|1|1|0]ᵀ
    0.8136763978198028 = [1|0|1|0|0|0|0|1]ᵀ
    0.8568745705413205 = [0|0|1|0|0|1|1|0]ᵀ
    0.9206383473679366 = [0|1|0|1|1|1|1|1]ᵀ
    0.9585538285685462 = [1|0|0|1|1|0|0|1]ᵀ
    0.9750738827023246 = [0|1|0|1|0|1|1|1]ᵀ
    1.0017520012900647 = [0|0|0|1|1|1|1|0]ᵀ
    1.0129893639029346 = [1|0|0|1|0|0|0|1]ᵀ
    1.0513636596941176 = [0|0|0|0|1|0|1|1]ᵀ
    1.0561875366244522 = [0|0|0|1|0|1|1|0]ᵀ
    1.0650618251841126 = [0|0|1|1|1|1|1|1]ᵀ
    1.1057991950285055 = [0|0|0|0|0|0|1|1]ᵀ
    1.1194973605184997 = [0|0|1|1|0|1|1|1]ᵀ
    1.289461662914463 = [0|1|0|0|1|1|0|0]ᵀ
    1.3438971982488508 = [0|1|0|0|0|1|0|0]ᵀ
    1.3527714868085108 = [0|1|1|0|1|1|0|1]ᵀ
    1.4072070221428985 = [0|1|1|0|0|1|0|1]ᵀ
    1.4083821313165126 = [1|1|0|0|1|1|1|0]ᵀ
    1.4338851407306379 = [0|0|1|0|1|1|0|0]ᵀ
    1.4628176666509005 = [1|1|0|0|0|1|1|0]ᵀ
    1.4716919552105594 = [1|1|1|0|1|1|1|1]ᵀ
    1.4883206760650258 = [0|0|1|0|0|1|0|0]ᵀ
    1.5261274905449473 = [1|1|1|0|0|1|1|1]ᵀ
    1.5520844528916418 = [0|1|0|1|1|1|0|1]ᵀ
    1.5528056091326878 = [1|0|1|0|1|1|1|0]ᵀ
    1.6065199882260297 = [0|1|0|1|0|1|0|1]ᵀ
    1.6072411444670756 = [1|0|1|0|0|1|1|0]ᵀ
    1.6331981068137695 = [0|0|0|1|1|1|0|0]ᵀ
    1.6710049212936922 = [1|1|0|1|1|1|1|1]ᵀ
    1.682809765217823 = [0|0|0|0|1|0|0|1]ᵀ
    1.687633642148158 = [0|0|0|1|0|1|0|0]ᵀ
    1.696507930707817 = [0|0|1|1|1|1|0|1]ᵀ
    1.7254404566280799 = [1|1|0|1|0|1|1|1]ᵀ
    1.7372453005522108 = [0|0|0|0|0|0|0|1]ᵀ
    1.7509434660422052 = [0|0|1|1|0|1|0|1]ᵀ
    1.7521185752158202 = [1|0|0|1|1|1|1|0]ᵀ
    1.801730233619873 = [1|0|0|0|1|0|1|1]ᵀ
    1.8065541105502074 = [1|0|0|1|0|1|1|0]ᵀ
    1.8154283991098674 = [1|0|1|1|1|1|1|1]ᵀ
    1.856165768954261 = [1|0|0|0|0|0|1|1]ᵀ
    1.8698639344442547 = [1|0|1|1|0|1|1|1]ᵀ
    2.039828236840218 = [1|1|0|0|1|1|0|0]ᵀ
    2.094263772174606 = [1|1|0|0|0|1|0|0]ᵀ
    2.103138060734265 = [1|1|1|0|1|1|0|1]ᵀ
    2.157573596068654 = [1|1|1|0|0|1|0|1]ᵀ
    2.1842517146563933 = [1|0|1|0|1|1|0|0]ᵀ
    2.238687249990781 = [1|0|1|0|0|1|0|0]ᵀ
    2.302451026817397 = [1|1|0|1|1|1|0|1]ᵀ
    2.356886562151784 = [1|1|0|1|0|1|0|1]ᵀ
    2.3835646807395245 = [1|0|0|1|1|1|0|0]ᵀ
    2.3952608579429686 = [0|1|0|0|1|1|1|1]ᵀ
    2.4331763391435786 = [1|0|0|0|1|0|0|1]ᵀ
    2.438000216073913 = [1|0|0|1|0|1|0|0]ᵀ
    2.4468745046335725 = [1|0|1|1|1|1|0|1]ᵀ
    2.4496963932773563 = [0|1|0|0|0|1|1|1]ᵀ
    2.476374511865097 = [0|0|0|0|1|1|1|0]ᵀ
    2.4876118744779663 = [1|0|0|0|0|0|0|1]ᵀ
    2.50131003996796 = [1|0|1|1|0|1|0|1]ᵀ
    2.530810047199484 = [0|0|0|0|0|1|1|0]ᵀ
    2.5396843357591434 = [0|0|1|0|1|1|1|1]ᵀ
    2.594119871093531 = [0|0|1|0|0|1|1|1]ᵀ
    2.738997301842276 = [0|0|0|1|1|1|1|1]ᵀ
    2.7934328371766632 = [0|0|0|1|0|1|1|1]ᵀ
    3.0267069634666743 = [0|1|0|0|1|1|0|1]ᵀ
    3.081142498801062 = [0|1|0|0|0|1|0|1]ᵀ
    3.1078206173888017 = [0|0|0|0|1|1|0|0]ᵀ
    3.145627431868723 = [1|1|0|0|1|1|1|1]ᵀ
    3.162256152723189 = [0|0|0|0|0|1|0|0]ᵀ
    3.1711304412828487 = [0|0|1|0|1|1|0|1]ᵀ
    3.2000629672031113 = [1|1|0|0|0|1|1|1]ᵀ
    3.225565976617237 = [0|0|1|0|0|1|0|1]ᵀ
    3.2267410857908523 = [1|0|0|0|1|1|1|0]ᵀ
    3.281176621125239 = [1|0|0|0|0|1|1|0]ᵀ
    3.2900509096848984 = [1|0|1|0|1|1|1|1]ᵀ
    3.344486445019286 = [1|0|1|0|0|1|1|1]ᵀ
    3.3704434073659812 = [0|0|0|1|1|1|0|1]ᵀ
    3.424878942700369 = [0|0|0|1|0|1|0|1]ᵀ
    3.4893638757680305 = [1|0|0|1|1|1|1|1]ᵀ
    3.5437994111024187 = [1|0|0|1|0|1|1|1]ᵀ
    3.7770735373924293 = [1|1|0|0|1|1|0|1]ᵀ
    3.831509072726817 = [1|1|0|0|0|1|0|1]ᵀ
    3.8581871913145567 = [1|0|0|0|1|1|0|0]ᵀ
    3.912622726648945 = [1|0|0|0|0|1|0|0]ᵀ
    3.9214970152086046 = [1|0|1|0|1|1|0|1]ᵀ
    3.975932550542992 = [1|0|1|0|0|1|0|1]ᵀ
    4.120809981291735 = [1|0|0|1|1|1|0|1]ᵀ
    4.1752455166261235 = [1|0|0|1|0|1|0|1]ᵀ
    4.213619812417307 = [0|0|0|0|1|1|1|1]ᵀ
    4.2680553477516945 = [0|0|0|0|0|1|1|1]ᵀ
    4.845065917941013 = [0|0|0|0|1|1|0|1]ᵀ
    4.899501453275401 = [0|0|0|0|0|1|0|1]ᵀ
    4.963986386343062 = [1|0|0|0|1|1|1|1]ᵀ
    5.01842192167745 = [1|0|0|0|0|1|1|1]ᵀ
    5.5954324918667675 = [1|0|0|0|1|1|0|1]ᵀ
    5.6498680272011566 = [1|0|0|0|0|1|0|1]ᵀ
""".trimIndent()

private val rawDoubles = record
    .split("\n")
    .filter { line -> line.contains(" = ")}
    .map { line -> line.substringBefore(" = ").toDouble() }
private val specialDoubles: List<Double> = listOf(0.0, 1.0, 2.0, Math.E)
private val specialsRemoved1: List<Double> = rawDoubles.filter { it != 0.0 }.map { abs(it) }
private val specialsRemoved: List<Double> = generateSequence(8.0) { xx -> xx * 0.93 }.take(256).toList()
private val pairedMeans: List<Double> = run {
    val result = Array(specialsRemoved.size / 2) { 0.0 }
    for (i in 0 until specialsRemoved.size / 2) {
        result[i] = (specialsRemoved[i * 2] + specialsRemoved[i * 2 + 1]) / 2.0
    }
    (specialDoubles + result.toList()).sorted()
}

private val significandBits = 3
private val exponentBits = 4
val exponentMask = ((1 shl exponentBits) - 1) shl significandBits
val significandMask = (1 shl significandBits) - 1
fun ieeeSign(index : Int) = (index and 128) shr (significandBits + exponentBits)
fun ieeeExponent(index : Int) = (index and exponentMask) shr significandBits
fun ieeeSignificand(index : Int) = (index and significandMask)
fun ieeeBasis(index : Int) = when(val exponent = ieeeExponent(index)) {
    0 -> 0.125
    else -> (2.0).pow(exponent - 4)
}
fun ieeeStart(index : Int) = when(val exponent = ieeeExponent(index)) {
    0 -> 0.0
    else -> (2.0).pow(exponent - 1)
}
fun ieeeAdd(index : Int) = ieeeBasis(index) * ieeeSignificand(index)
fun ieeeAbs(index : Int) : Double {
    if (ieeeExponent(index) == 15 && ieeeSignificand(index) == 0) return Double.POSITIVE_INFINITY
    if (ieeeExponent(index) == 15) return Double.NaN
    val start = ieeeStart(index)
    val add = ieeeAdd(index)
    return start + add
}
fun ieee(index : Int) : Double {
    val sign = ieeeSign(index)
    val absolute = ieeeAbs(index)
    return if (sign == 0) absolute
    else -absolute
}

val doubleLookup = Array(256) { index -> ieee(index) / 32.0}

fun byteToDouble(byte : Byte) = doubleLookup[byte + 128]
fun doubleToByteIndex(value : Double) = (doubleLookup.indices.minByOrNull { (doubleLookup[it] - value).pow(2.0) }!! - 128).toByte()
fun buildBinaryOperation(op : (Double, Double) -> Double) = Array(256 * 256) {
    val leftByte = it shr 8
    val rightByte = it and 255
    val leftDouble = doubleLookup[leftByte]
    val rightDouble = doubleLookup[rightByte]
    val result = op(leftDouble, rightDouble)
    val resultIndex = doubleToByteIndex(result)
    resultIndex
}
private val additionTable by lazy { buildBinaryOperation { left, right -> left + right } }
private val subtractionTable by lazy { buildBinaryOperation { left, right -> left - right } }
private val multiplicationTable by lazy { buildBinaryOperation { left, right -> left * right } }
private val powerTable by lazy { buildBinaryOperation { left, right -> left.pow(right) } }
private val divisionTable by lazy { buildBinaryOperation { left, right ->
    if (right == 0.0) 0.0
    else left / right
}}
private fun lookup(table : Array<Byte>, left : Byte, right : Byte) : Byte = run {
    val index = (left+128 shl 8) + right+128
    val result = table[index]
    result
}
private fun buildUnaryOperation(op : (Double) -> Double) = Array(256) {
    val byte = it and 255
    val double = doubleLookup[byte]
    val result = op(double)
    val resultIndex = doubleToByteIndex(result)
    resultIndex
}
private val logitTable by lazy { buildUnaryOperation { value -> logit(value) } }
private val reluTable by lazy { buildUnaryOperation { value -> relu(value) } }
private val lreluTable by lazy { buildUnaryOperation { value -> lrelu(value) } }
private val stepTable by lazy { buildUnaryOperation { value -> step(value) } }
private val lstepTable by lazy { buildUnaryOperation { value -> lstep(value) } }
private val expTable by lazy { buildUnaryOperation { value -> exp(value) } }
private val tanhTable by lazy { buildUnaryOperation { value -> tanh(value) } }
private fun lookup(table : Array<Byte>, byte : Byte) = table[byte + 128]

val QuarterPrecisionAlgebraicType = object : AlgebraicType<Byte>(Byte::class.java) {
    override val simpleName = "gauss byte"
    override val zero = 0.toByte()
    override val one = doubleToByteIndex(1.0)
    override fun unary(op : UnaryOp, value : Byte) : Byte = run {
        val result = when(op) {
            NEGATE ->
                (-value).toByte()
            LOGIT ->
                lookup(logitTable, value)
            RELU ->
                lookup(reluTable, value)
            LRELU ->
                lookup(lreluTable, value)
            STEP ->
                lookup(stepTable, value)
            LSTEP ->
                lookup(lstepTable, value)
            EXP ->
                lookup(expTable, value)
            TANH ->
                lookup(tanhTable, value)
            D -> zero
            else -> error("$op")
        }
//        val x = "$op ${render(value)} -> ${render(result)}"
//        val compare = DoubleAlgebraicType.unary(op, byteToDouble(value))
//        if (abs(compare - byteToDouble(result)) > 0.06) {
//            error("hello")
//        }
        result
    }
    override fun binary(op: BinaryOp, left: Byte, right: Byte) = run {
        val result = when(op) {
            PLUS ->
                lookup(additionTable, left, right)
            MINUS ->
                lookup(subtractionTable, left, right)
            TIMES ->
                lookup(multiplicationTable, left, right)
            DIV -> {
                assert(right != 0.toByte())
                lookup(divisionTable, left, right)
            }
            POW ->
                lookup(powerTable, left, right)
            else -> error("$op")
        }
//        val x = "${render(left)} ${op.op} ${render(right)} -> ${render(result)}"
//        val compare = DoubleAlgebraicType.binary(op, byteToDouble(left), byteToDouble(right))
//        if (abs(compare - byteToDouble(result)) > 0.06) {
//            error("hello")
//        }

        result
    }

    override fun compare(left: Byte, right: Byte) =
        doubleLookup[left+128].compareTo(doubleLookup[right+128])
    override fun allocArray(size: Int, init: (Int) -> Byte) = Array(size, init)
    override fun allocNullableArray(size: Int, init: (Int) -> Byte?) = Array(size, init)
    override fun render(byte: Any): String {
        val value = byteToDouble(byte as Byte)
        val result = BigDecimal(value).setScale(5, RoundingMode.HALF_EVEN).toString()
        return if (result.contains(".")) result.trimEnd('0').trimEnd('.')
        else result
    }
    override fun fromDouble(double : Double) = doubleToByteIndex(double)
}
